@page "/"
@using TaskManagerApp.Helper
@using TaskManagerApp.Services
@using System.Text
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Forms
@inject TaskManager TaskManager
@inject IJSRuntime JS

<div class="container">
    <h1>Task Manager</h1>

    <!-- Taken toevoegen -->
    <div>
        <input @bind="TaskName" placeholder="Enter task name" />
        <input @bind="TaskPriority" type="number" placeholder="Priority (lower is more important)" />
        <button @onclick="AddTask">Add Task</button>
        <button @onclick="SaveTask">Save Tasks</button>
        <button @onclick="LoadTasks">Load Tasks</button> 
        <input type="file" @ref="fileInput" @onchange="LoadTasksInput" />
 
    </div>

    <!-- Takenlijst -->
    <ul>
        @foreach (var task in Tasks)
        {
            <li>
                <span>@task.Name (Priority: @task.Priority)</span>
                <button @onclick="() => RemoveTask(task.Name)">Remove</button>
            </li>
        }
    </ul>
</div>

@code {
    private string TaskName = string.Empty;
    private int TaskPriority;
    private List<TodoTask> Tasks = new();
    protected override void OnInitialized()
    {
        Tasks = TaskManager.GetTasks().ToList();
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(TaskName))
        {
            TaskManager.AddTask(new TodoTask { Name = TaskName, Priority = TaskPriority });
            Tasks = TaskManager.GetTasks().ToList();
            TaskName = string.Empty;
            TaskPriority = 0;
        }
    }

    private void RemoveTask(string taskName)
    {
        TaskManager.RemoveTask(taskName);
        Tasks = TaskManager.GetTasks().ToList();
    }


    private async void SaveTask()
    {
        string savedTasksEncoded = TaskManager.EnCodeTask();
        string fileName = "tasks.txt";
        string content = "data:text/plain;charset=utf-8," + Uri.EscapeDataString(savedTasksEncoded);
        await JS.InvokeVoidAsync("downloadFile", fileName, content);
    }


    private ElementReference fileInput;

private async Task LoadTasksInput()
{
    // Haal het geselecteerde bestand op
    var files = await JS.InvokeAsync<string>("getUploadedFileContent", fileInput);
    if (files != null)
    {
        // Decodeer de inhoud van het bestand
        string decodedTasks = Uri.UnescapeDataString(files);
        
        // Gebruik de inhoud om taken te laden
        TaskManager.LoadTasks(decodedTasks);

        Console.WriteLine("Taken geladen: " + decodedTasks);
    }
}

    private void LoadTasks()
    {
        Tasks = TaskManager.GetTasks().ToList();
    }
}
